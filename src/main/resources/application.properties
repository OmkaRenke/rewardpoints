spring.application.name=rewardpoints

spring.datasource.url=jdbc:mysql://localhost:3306/reward_points_db
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

server.port=8080


Service.RETAILERS_CUSTOMER_NOT_FOUND = No customers found for the given retailer ID.
Service.TRANSACTIONS_NOT_FOUND = No transactions found for the given Id.
Service.CUSTOMER_NOT_FOUND = Customer not found with the provided ID.
Service.RETAILER_NOT_FOUND = Retailer not found with the provided ID.
SERVICE.CUSTOMER.EXISTS =  already exists with the provided details.


Service.INVALID_DATE_FORMAT = Invalid date format. Please use YYYY-MM-DD.
Service.START_DATE_AFTER_END = Start date cannot be after end date.
Service.DATE_IN_FUTURE_NOT_ALLOWED=Start date and end date cannot be in the future.



API.TRANSACTION_SAVE_SUCCESS =Transaction saved successfully
API.CUSTOMER_SAVE_SUCCESS = Customer registered successfully
Transaction.DUPLICATE_TRANSACTION_NUMBER = Transaction number already exists.
Transaction.DATA_INTEGRITY= A data integrity error occurred. Please check your input.


retailer.name.absent = Retailer name is mandatory

customer.name.absent = Customer name is mandatory
customer.email.invalid = Please provide a valid email address (e.g., john.doe@example.com).
customer.email.absent = Customer email is mandatory
customer.contact.invalid = Contact number must be a 10-digit number.

transaction.number.required = Transaction number is required.
transaction.mode.required = Transaction mode is required.
transaction.amount.required = Transaction amount must not be null.
transaction.amount.min = Transaction amount must be greater than 0.
transaction.date.required = Transaction date must be provided.
transaction.points.invalid = Points earned cannot be negative.
transaction.customer.required = Customer information is required for the transaction.